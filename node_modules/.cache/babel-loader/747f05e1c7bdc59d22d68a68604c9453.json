{"ast":null,"code":"import { combineReducers } from \"redux\";\nlet initialState = {\n  userName: \"\",\n  boards: [{\n    boardName: \"mukhtar\",\n    isSet: false,\n    listArray: [{\n      listName: \"list 1\",\n      cards: [{\n        cardName: \"card 1\"\n      }]\n    }, {\n      listName: \"list 2\",\n      cards: [{\n        cardName: \"card 1\"\n      }, {\n        cardName: \"card 2\"\n      }, {\n        cardName: \"card 3\"\n      }]\n    }]\n  }],\n  boardName: []\n};\n\nfunction appReducer(state = initialState, action) {\n  let stateCopy = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case \"addBoard\":\n      return addToList(stateCopy, action.payload);\n\n    case \"deleteItem\":\n      let newBoards = stateCopy.boards.filter((el, i) => i !== action.payload);\n      stateCopy.boards = newBoards;\n      return stateCopy;\n\n    case \"editField\":\n      return editField(stateCopy, action.payload.data, action.payload.index);\n\n    case \"editIndex\":\n      let newBoard = stateCopy.boards.indexOf(action.payload);\n      stateCopy.boards = newBoard;\n      return stateCopy;\n\n    case \"boardClicked\":\n      return clicked(stateCopy, action.payload);\n\n    case \"addList\":\n      console.log(action.payload);\n      return addList(stateCopy, action.payload.data, action.payload.index);\n\n    case \"addCard\":\n      return addCard(stateCopy, action.payload.data, action.payload.Bindex, action.payload.Lindex);\n\n    case \"sorted\":\n      return sorted(stateCopy, action.payload);\n\n    default:\n      return stateCopy;\n  }\n}\n\nconst rootReducers = combineReducers({\n  appReducer\n});\nexport default rootReducers;\n\nlet addToList = (state, data) => {\n  data.listArray = [];\n  let newBoardList = state.boards.slice();\n  newBoardList.push(data);\n  state.boards = newBoardList;\n  return state;\n};\n\nlet editField = (state, data, index) => {\n  state.boards.map((element, i) => {\n    if (i === index) {\n      element.boardName = data;\n      element.isSet = !element.isSet;\n    }\n\n    return true;\n  });\n  return state;\n};\n\nlet clicked = (state, index) => {\n  state.boards.map((elem, i) => {\n    if (i === index) {\n      elem.boardClicked = !elem.boardClicked;\n    }\n\n    return true;\n  });\n  return state;\n};\n\nlet addList = (state, data, index) => {\n  state.boards[index].listArray.push({\n    listName: data,\n    cards: []\n  });\n  return state;\n};\n\nlet addCard = (state, data, Bindex, Lindex) => {\n  console.log(state);\n  state.boards[Bindex].listArray[Lindex].cards.push({\n    cardName: data\n  });\n  return state;\n};\n\nlet sorted = (state, {\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  draggableId,\n  BoardNum\n}) => {\n  // console.log({droppableIdStart,droppableIdEnd,droppableIndexStart,droppableIndexEnd,draggableId})\n  // dragging for same list\n  if (droppableIdStart === droppableIdEnd) {\n    const listIndex = parseInt(droppableIdStart.split(\"t\")[1]);\n    console.log(\"listIndex\", listIndex);\n    const list = state.boards[BoardNum].listArray[listIndex];\n    const card = list.cards[droppableIndexStart];\n    list.cards.splice(droppableIndexStart, 1);\n    list.cards.splice(droppableIndexEnd, 0, card);\n  } // dragging for other list\n  else {\n      const startListIndex = parseInt(droppableIdStart.split(\"t\")[1]);\n      const endListIndex = parseInt(droppableIdEnd.split(\"t\")[1]);\n      const startList = state.boards[BoardNum].listArray[startListIndex];\n      const endList = state.boards[BoardNum].listArray[endListIndex];\n      const card = startList.cards[droppableIndexStart];\n      startList.cards.splice(droppableIdStart, 1);\n      endList.cards.splice(droppableIdEnd, 0, card);\n    }\n\n  return state;\n};","map":{"version":3,"sources":["/Users/macbookpro/Downloads/my codes/daily-assignment/W24Wass/weekly-ass/src/redux/stateReducer.js"],"names":["combineReducers","initialState","userName","boards","boardName","isSet","listArray","listName","cards","cardName","appReducer","state","action","stateCopy","JSON","parse","stringify","type","addToList","payload","newBoards","filter","el","i","editField","data","index","newBoard","indexOf","clicked","console","log","addList","addCard","Bindex","Lindex","sorted","rootReducers","newBoardList","slice","push","map","element","elem","boardClicked","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","BoardNum","listIndex","parseInt","split","list","card","splice","startListIndex","endListIndex","startList","endList"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\n\nlet initialState = {\n    userName: \"\",\n    boards: [{\n        boardName: \"mukhtar\",\n        isSet: false,\n        listArray: [{\n            listName: \"list 1\",\n            cards: [{\n                cardName: \"card 1\"\n            }]\n        },\n        {\n            listName: \"list 2\",\n            cards: [{\n                cardName: \"card 1\"\n            },\n            {\n                cardName: \"card 2\"\n            },\n            {\n                cardName: \"card 3\"\n            }]\n        }]\n    }],\n    boardName: []\n}\n\nfunction appReducer(state = initialState, action) {\n    let stateCopy = JSON.parse(JSON.stringify(state))\n    switch (action.type) {\n        case \"addBoard\":\n            return addToList(stateCopy, action.payload)\n        case \"deleteItem\":\n            let newBoards = stateCopy.boards.filter((el, i) => i !== action.payload)\n            stateCopy.boards = newBoards\n            return stateCopy;\n        case \"editField\":\n            return editField(stateCopy, action.payload.data, action.payload.index)\n        case \"editIndex\":\n            let newBoard = stateCopy.boards.indexOf(action.payload)\n            stateCopy.boards = newBoard\n            return stateCopy;\n        case \"boardClicked\":\n            return clicked(stateCopy, action.payload)\n        case \"addList\":\n            console.log(action.payload)\n            return addList(stateCopy, action.payload.data, action.payload.index)\n        case \"addCard\":\n            return addCard(stateCopy, action.payload.data, action.payload.Bindex, action.payload.Lindex)\n        case \"sorted\":\n            return sorted(stateCopy, action.payload)\n        default:\n            return stateCopy;\n    }\n}\n\nconst rootReducers = combineReducers({\n    appReducer\n})\n\nexport default rootReducers;\n\nlet addToList = (state, data) => {\n    data.listArray = []\n    let newBoardList = state.boards.slice()\n    newBoardList.push(data)\n    state.boards = newBoardList;\n    return state;\n}\n\nlet editField = (state, data, index) => {\n    state.boards.map((element, i) => {\n        if (i === index) {\n            element.boardName = data\n            element.isSet = !element.isSet\n        }\n        return true\n    });\n    return state\n}\n\nlet clicked = (state, index) => {\n    state.boards.map((elem, i) => {\n        if (i === index) {\n            elem.boardClicked = !elem.boardClicked\n        }\n        return true\n    })\n    return state\n}\n\nlet addList = (state, data, index) => {\n    state.boards[index].listArray.push({ listName: data, cards: [] })\n    return state\n}\n\nlet addCard = (state, data, Bindex, Lindex) => {\n    console.log(state)\n    state.boards[Bindex].listArray[Lindex].cards.push({ cardName: data })\n    return state\n}\n\nlet sorted = (state, { droppableIdStart, droppableIdEnd, droppableIndexStart, droppableIndexEnd, draggableId, BoardNum }) => {\n    // console.log({droppableIdStart,droppableIdEnd,droppableIndexStart,droppableIndexEnd,draggableId})\n    // dragging for same list\n    if (droppableIdStart === droppableIdEnd) {\n        const listIndex = parseInt(droppableIdStart.split(\"t\")[1])\n        console.log(\"listIndex\", listIndex)\n        const list = state.boards[BoardNum].listArray[listIndex]\n        const card = list.cards[droppableIndexStart]\n        list.cards.splice(droppableIndexStart, 1)\n        list.cards.splice(droppableIndexEnd, 0, card)\n    }\n    // dragging for other list\n    else {\n        const startListIndex = parseInt(droppableIdStart.split(\"t\")[1])\n        const endListIndex = parseInt(droppableIdEnd.split(\"t\")[1])\n        const startList = state.boards[BoardNum].listArray[startListIndex]\n        const endList = state.boards[BoardNum].listArray[endListIndex]\n        const card = startList.cards[droppableIndexStart]\n        startList.cards.splice(droppableIdStart, 1)\n        endList.cards.splice(droppableIdEnd, 0, card)  \n    }\n    return state\n}"]},"metadata":{},"sourceType":"module"}