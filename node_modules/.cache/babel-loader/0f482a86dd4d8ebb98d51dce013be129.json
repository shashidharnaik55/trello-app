{"ast":null,"code":"import { combineReducers } from \"redux\";\nlet initialState = {\n  userName: \"\",\n  boards: [{\n    boardName: \"mukhtar\",\n    isSet: false,\n    listArray: []\n  }],\n  boardName: []\n};\n\nfunction appReducer(state = initialState, action) {\n  let stateCopy = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case \"addBoard\":\n      return addToList(stateCopy, action.payload);\n\n    case \"deleteItem\":\n      let newBoards = stateCopy.boards.filter((el, i) => i !== action.payload);\n      stateCopy.boards = newBoards;\n      return stateCopy;\n\n    case \"editField\":\n      return editField(stateCopy, action.payload.data, action.payload.index);\n\n    case \"editIndex\":\n      let newBoard = stateCopy.boards.indexOf(action.payload);\n      stateCopy.boards = newBoard;\n      return stateCopy;\n\n    case \"boardClicked\":\n      return clicked(stateCopy, action.payload);\n\n    case \"addList\":\n      console.log(action.payload);\n      return addList(stateCopy, action.payload.data, action.payload.index);\n\n    case \"addCard\":\n      return addCard(stateCopy, action.payload.data, action.payload.Bindex, action.payload.Lindex);\n\n    case \"sorted\":\n      return sorted(stateCopy, action.payload);\n\n    default:\n      return stateCopy;\n  }\n}\n\nconst rootReducers = combineReducers({\n  appReducer\n});\nexport default rootReducers;\n\nlet addToList = (state, data) => {\n  data.listArray = [];\n  let newBoardList = state.boards.slice();\n  newBoardList.push(data);\n  state.boards = newBoardList;\n  return state;\n};\n\nlet editField = (state, data, index) => {\n  state.boards.map((element, i) => {\n    if (i === index) {\n      element.boardName = data;\n      element.isSet = !element.isSet;\n    }\n\n    return true;\n  });\n  return state;\n};\n\nlet clicked = (state, index) => {\n  state.boards.map((elem, i) => {\n    if (i === index) {\n      elem.boardClicked = !elem.boardClicked;\n    }\n\n    return true;\n  });\n  return state;\n};\n\nlet addList = (state, data, index) => {\n  state.boards[index].listArray.push({\n    listName: data,\n    cards: []\n  });\n  return state;\n};\n\nlet addCard = (state, data, Bindex, Lindex) => {\n  console.log(state);\n  state.boards[Bindex].listArray[Lindex].cards.push({\n    cardName: data\n  });\n  return state;\n};\n\nlet sorted = (state, {\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  draggableId\n}) => {\n  console.log({\n    droppableIdStart,\n    droppableIdEnd,\n    droppableIndexStart,\n    droppableIndexEnd,\n    draggableId\n  });\n\n  if (droppableIdStart === droppableIndexEnd) {}\n\n  return state;\n};","map":{"version":3,"sources":["/Users/macbookpro/Downloads/my codes/daily-assignment/W24Wass/weekly-ass/src/redux/stateReducer.js"],"names":["combineReducers","initialState","userName","boards","boardName","isSet","listArray","appReducer","state","action","stateCopy","JSON","parse","stringify","type","addToList","payload","newBoards","filter","el","i","editField","data","index","newBoard","indexOf","clicked","console","log","addList","addCard","Bindex","Lindex","sorted","rootReducers","newBoardList","slice","push","map","element","elem","boardClicked","listName","cards","cardName","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\n\nlet initialState = {\n    userName: \"\",\n    boards: [{\n        boardName: \"mukhtar\",\n        isSet: false,\n        listArray: []\n    }],\n    boardName: []\n}\n\nfunction appReducer(state = initialState, action) {\n    let stateCopy = JSON.parse(JSON.stringify(state))\n    switch (action.type) {\n        case \"addBoard\":\n            return addToList(stateCopy, action.payload)\n        case \"deleteItem\":\n            let newBoards = stateCopy.boards.filter((el, i) => i !== action.payload)\n            stateCopy.boards = newBoards\n            return stateCopy;\n        case \"editField\":\n            return editField(stateCopy, action.payload.data, action.payload.index)\n        case \"editIndex\":\n            let newBoard = stateCopy.boards.indexOf(action.payload)\n            stateCopy.boards = newBoard\n            return stateCopy;\n        case \"boardClicked\":\n            return clicked(stateCopy, action.payload)\n        case \"addList\":\n            console.log(action.payload)\n            return addList(stateCopy, action.payload.data, action.payload.index)\n        case \"addCard\":\n            return addCard(stateCopy, action.payload.data, action.payload.Bindex, action.payload.Lindex)\n        case \"sorted\":\n            return sorted(stateCopy, action.payload)\n        default:\n            return stateCopy;\n    }\n}\n\nconst rootReducers = combineReducers({\n    appReducer\n})\n\nexport default rootReducers;\n\nlet addToList = (state, data) => {\n    data.listArray = []\n    let newBoardList = state.boards.slice()\n    newBoardList.push(data)\n    state.boards = newBoardList;\n    return state;\n}\n\nlet editField = (state, data, index) => {\n    state.boards.map((element, i) => {\n        if (i === index) {\n            element.boardName = data\n            element.isSet = !element.isSet\n        }\n        return true\n    });\n    return state\n}\n\nlet clicked = (state, index) => {\n    state.boards.map((elem, i) => {\n        if (i === index) {\n            elem.boardClicked = !elem.boardClicked\n        }\n        return true\n    })\n    return state\n}\n\nlet addList = (state, data, index) => {\n    state.boards[index].listArray.push({ listName: data, cards: [] })\n    return state\n}\n\nlet addCard = (state, data, Bindex, Lindex) => {\n    console.log(state)\n    state.boards[Bindex].listArray[Lindex].cards.push({ cardName: data })\n    return state\n}\n\nlet sorted = (state, { droppableIdStart,droppableIdEnd,droppableIndexStart,droppableIndexEnd,draggableId }) => {\n    console.log({droppableIdStart,droppableIdEnd,droppableIndexStart,droppableIndexEnd,draggableId})\n    if(droppableIdStart === droppableIndexEnd){\n\n    }\n    return state\n}"]},"metadata":{},"sourceType":"module"}