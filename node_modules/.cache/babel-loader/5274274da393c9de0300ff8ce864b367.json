{"ast":null,"code":"import { combineReducers } from \"redux\";\nlet initialState = {\n  userName: \"\",\n  boards: [],\n  backLog: [],\n  toDo: [],\n  inProgress: [],\n  test: [],\n  done: []\n};\n\nfunction appReducer(state = initialState, action) {\n  let stateCopy = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case \"addBoard\":\n      return addToList(stateCopy, action.payload);\n\n    case \"deleteItem\":\n      let newBoards = stateCopy.boards.filter((el, i) => i !== action.payload);\n      stateCopy.boards = newBoards;\n      return stateCopy;\n\n    case \"editField\":\n      return editField(stateCopy, action.payload.data, action.payload.index);\n\n    case \"editIndex\":\n      let newBoard = stateCopy.boards.indexOf(action.payload);\n      stateCopy.boards = newBoard;\n      return stateCopy;\n\n    default:\n      return stateCopy;\n  }\n}\n\nconst rootReducers = combineReducers({\n  appReducer\n});\nexport default rootReducers;\n\nlet addToList = (state, data) => {\n  let newBoardList = state.boards.slice();\n  newBoardList.push(data);\n  state.boards = newBoardList;\n  return state;\n};\n\nlet editField = (state, data, index) => {\n  state.boards.map((element, i) => {\n    if (i === index) {\n      element.boardName = data;\n      element.isSet = !element.isSet;\n    }\n\n    return true;\n  });\n  return state;\n};","map":{"version":3,"sources":["/Users/macbookpro/Downloads/my codes/daily-assignment/W24Wass/weekly-ass/src/redux/stateReducer.js"],"names":["combineReducers","initialState","userName","boards","backLog","toDo","inProgress","test","done","appReducer","state","action","stateCopy","JSON","parse","stringify","type","addToList","payload","newBoards","filter","el","i","editField","data","index","newBoard","indexOf","rootReducers","newBoardList","slice","push","map","element","boardName","isSet"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,QAAQ,EAAE,EADK;AAEfC,EAAAA,MAAM,EAAE,EAFO;AAGfC,EAAAA,OAAO,EAAE,EAHM;AAIfC,EAAAA,IAAI,EAAE,EAJS;AAKfC,EAAAA,UAAU,EAAE,EALG;AAMfC,EAAAA,IAAI,EAAE,EANS;AAOfC,EAAAA,IAAI,EAAE;AAPS,CAAnB;;AAUA,SAASC,UAAT,CAAoBC,KAAK,GAAGT,YAA5B,EAA0CU,MAA1C,EAAkD;AAC9C,MAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,KAAf,CAAX,CAAhB;;AACA,UAAQC,MAAM,CAACK,IAAf;AACI,SAAK,UAAL;AACI,aAAOC,SAAS,CAACL,SAAD,EAAYD,MAAM,CAACO,OAAnB,CAAhB;;AACJ,SAAK,YAAL;AACI,UAAIC,SAAS,GAAGP,SAAS,CAACT,MAAV,CAAiBiB,MAAjB,CAAwB,CAACC,EAAD,EAAKC,CAAL,KAAWA,CAAC,KAAKX,MAAM,CAACO,OAAhD,CAAhB;AACAN,MAAAA,SAAS,CAACT,MAAV,GAAmBgB,SAAnB;AACA,aAAOP,SAAP;;AACJ,SAAK,WAAL;AACI,aAAOW,SAAS,CAACX,SAAD,EAAYD,MAAM,CAACO,OAAP,CAAeM,IAA3B,EAAiCb,MAAM,CAACO,OAAP,CAAeO,KAAhD,CAAhB;;AACJ,SAAK,WAAL;AACI,UAAIC,QAAQ,GAAGd,SAAS,CAACT,MAAV,CAAiBwB,OAAjB,CAAyBhB,MAAM,CAACO,OAAhC,CAAf;AACAN,MAAAA,SAAS,CAACT,MAAV,GAAmBuB,QAAnB;AACA,aAAOd,SAAP;;AACJ;AACI,aAAOA,SAAP;AAdR;AAgBH;;AAED,MAAMgB,YAAY,GAAG5B,eAAe,CAAC;AACjCS,EAAAA;AADiC,CAAD,CAApC;AAIA,eAAemB,YAAf;;AAEA,IAAIX,SAAS,GAAG,CAACP,KAAD,EAAQc,IAAR,KAAiB;AAC7B,MAAIK,YAAY,GAAGnB,KAAK,CAACP,MAAN,CAAa2B,KAAb,EAAnB;AACAD,EAAAA,YAAY,CAACE,IAAb,CAAkBP,IAAlB;AACAd,EAAAA,KAAK,CAACP,MAAN,GAAe0B,YAAf;AACA,SAAOnB,KAAP;AACH,CALD;;AAOA,IAAIa,SAAS,GAAG,CAACb,KAAD,EAAQc,IAAR,EAAcC,KAAd,KAAwB;AACpCf,EAAAA,KAAK,CAACP,MAAN,CAAa6B,GAAb,CAAiB,CAACC,OAAD,EAAUX,CAAV,KAAgB;AAC7B,QAAIA,CAAC,KAAKG,KAAV,EAAiB;AACbQ,MAAAA,OAAO,CAACC,SAAR,GAAoBV,IAApB;AACAS,MAAAA,OAAO,CAACE,KAAR,GAAgB,CAACF,OAAO,CAACE,KAAzB;AACH;;AACD,WAAO,IAAP;AACH,GAND;AAOA,SAAOzB,KAAP;AACH,CATD","sourcesContent":["import { combineReducers } from \"redux\";\n\nlet initialState = {\n    userName: \"\",\n    boards: [],\n    backLog: [],\n    toDo: [],\n    inProgress: [],\n    test: [],\n    done: []\n}\n\nfunction appReducer(state = initialState, action) {\n    let stateCopy = JSON.parse(JSON.stringify(state))\n    switch (action.type) {\n        case \"addBoard\":\n            return addToList(stateCopy, action.payload)\n        case \"deleteItem\":\n            let newBoards = stateCopy.boards.filter((el, i) => i !== action.payload)\n            stateCopy.boards = newBoards\n            return stateCopy;\n        case \"editField\":\n            return editField(stateCopy, action.payload.data, action.payload.index)\n        case \"editIndex\":\n            let newBoard = stateCopy.boards.indexOf(action.payload)\n            stateCopy.boards = newBoard\n            return stateCopy;\n        default:\n            return stateCopy;\n    }\n}\n\nconst rootReducers = combineReducers({\n    appReducer\n})\n\nexport default rootReducers;\n\nlet addToList = (state, data) => {\n    let newBoardList = state.boards.slice()\n    newBoardList.push(data)\n    state.boards = newBoardList;\n    return state;\n}\n\nlet editField = (state, data, index) => {\n    state.boards.map((element, i) => {\n        if (i === index) {\n            element.boardName = data\n            element.isSet = !element.isSet\n        }\n        return true\n    });\n    return state\n}"]},"metadata":{},"sourceType":"module"}