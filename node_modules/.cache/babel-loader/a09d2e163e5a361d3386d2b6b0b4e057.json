{"ast":null,"code":"import { combineReducers } from \"redux\";\nlet initialState = {\n  userName: \"\",\n  page: 1,\n  bgImgs: [],\n  boards: []\n};\n\nfunction appReducer(state = initialState, action) {\n  let stateCopy = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case \"fImg\":\n      console.log(action.payload);\n      stateCopy.bgImgs = [...stateCopy.bgImgs, ...action.payload];\n      stateCopy.page++;\n      return stateCopy;\n\n    case \"addBoard\":\n      return addToList(stateCopy, action.payload);\n\n    case \"deleteItem\":\n      let newBoards = stateCopy.boards.filter((el, i) => i !== action.payload);\n      stateCopy.boards = newBoards;\n      return stateCopy;\n\n    case \"editField\":\n      return editField(stateCopy, action.payload.data, action.payload.index);\n\n    case \"editIndex\":\n      let newBoard = stateCopy.boards.indexOf(action.payload);\n      stateCopy.boards = newBoard;\n      return stateCopy;\n\n    case \"boardClicked\":\n      return clicked(stateCopy, action.payload.Bindex, action.payload.ind);\n\n    case \"addList\":\n      console.log(action.payload);\n      return addList(stateCopy, action.payload.data, action.payload.index);\n\n    case \"addCard\":\n      return addCard(stateCopy, action.payload.data, action.payload.Bindex, action.payload.Lindex);\n\n    case \"sorted\":\n      return sorted(stateCopy, action.payload);\n\n    default:\n      return stateCopy;\n  }\n}\n\nconst rootReducers = combineReducers({\n  appReducer\n});\nexport default rootReducers;\n\nlet addToList = (state, data) => {\n  data.listArray = [];\n  let newBoardList = state.boards.slice();\n  newBoardList.push(data);\n  state.boards = newBoardList;\n  return state;\n};\n\nlet editField = (state, data, index) => {\n  state.boards.map((element, i) => {\n    if (i === index) {\n      element.boardName = data;\n      element.isSet = !element.isSet;\n    }\n\n    return true;\n  });\n  return state;\n};\n\nlet clicked = (state, bindex, index) => {\n  console.log(bindex, index);\n  state.boards[bindex].listArray.map((elem, i) => {\n    if (i === index) {\n      elem.listSet = !elem.listSet;\n    }\n\n    return true;\n  });\n  return state;\n};\n\nlet addList = (state, data, index) => {\n  state.boards[index].listArray.push({\n    listName: data,\n    cards: []\n  });\n  return state;\n};\n\nlet addCard = (state, data, Bindex, Lindex) => {\n  console.log(state);\n  state.boards[Bindex].listArray[Lindex].cards.push({\n    cardName: data\n  });\n  return state;\n};\n\nlet sorted = (state, {\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  draggableId,\n  BoardNum\n}) => {\n  // dragging for same list\n  if (droppableIdStart === droppableIdEnd) {\n    const listIndex = parseInt(droppableIdStart.split(\"t\")[1]);\n    console.log(\"listIndex\", listIndex);\n    const list = state.boards[BoardNum].listArray[listIndex];\n    const card = list.cards[droppableIndexStart];\n    list.cards.splice(droppableIndexEnd, 0, card);\n    list.cards.splice(droppableIndexStart, 1);\n  } // dragging for other list\n  else {\n      const startListIndex = parseInt(droppableIdStart.split(\"t\")[1]);\n      const endListIndex = parseInt(droppableIdEnd.split(\"t\")[1]);\n      const startList = state.boards[BoardNum].listArray[startListIndex];\n      const endList = state.boards[BoardNum].listArray[endListIndex];\n      const card = startList.cards[droppableIndexStart];\n      endList.cards.splice(droppableIndexEnd, 0, card);\n      startList.cards.splice(droppableIndexStart, 1);\n    }\n\n  console.log(state.boards[BoardNum]);\n  return state;\n};","map":{"version":3,"sources":["/home/shashidhar/Downloads/My-Work-master/My-Work-Space/Trello-clone (React, Redux)/src/redux/stateReducer.js"],"names":["combineReducers","initialState","userName","page","bgImgs","boards","appReducer","state","action","stateCopy","JSON","parse","stringify","type","console","log","payload","addToList","newBoards","filter","el","i","editField","data","index","newBoard","indexOf","clicked","Bindex","ind","addList","addCard","Lindex","sorted","rootReducers","listArray","newBoardList","slice","push","map","element","boardName","isSet","bindex","elem","listSet","listName","cards","cardName","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","BoardNum","listIndex","parseInt","split","list","card","splice","startListIndex","endListIndex","startList","endList"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\n\nlet initialState = {\n    userName: \"\",\n    page: 1,\n    bgImgs: [],\n    boards: []\n}\n\nfunction appReducer(state = initialState, action) {\n    let stateCopy = JSON.parse(JSON.stringify(state))\n    switch (action.type) {\n        case \"fImg\":\n            console.log(action.payload)\n            stateCopy.bgImgs = [...stateCopy.bgImgs,...action.payload]\n            stateCopy.page++\n            return stateCopy;\n        case \"addBoard\":\n            return addToList(stateCopy, action.payload)\n        case \"deleteItem\":\n            let newBoards = stateCopy.boards.filter((el, i) => i !== action.payload)\n            stateCopy.boards = newBoards\n            return stateCopy;\n        case \"editField\":\n            return editField(stateCopy, action.payload.data, action.payload.index)\n        case \"editIndex\":\n            let newBoard = stateCopy.boards.indexOf(action.payload)\n            stateCopy.boards = newBoard\n            return stateCopy;\n        case \"boardClicked\":\n            return clicked(stateCopy, action.payload.Bindex, action.payload.ind)\n        case \"addList\":\n            console.log(action.payload)\n            return addList(stateCopy, action.payload.data, action.payload.index)\n        case \"addCard\":\n            return addCard(stateCopy, action.payload.data, action.payload.Bindex, action.payload.Lindex)\n        case \"sorted\":\n            return sorted(stateCopy, action.payload)\n        default:\n            return stateCopy;\n    }\n}\n\nconst rootReducers = combineReducers({\n    appReducer\n})\n\nexport default rootReducers;\n\nlet addToList = (state, data) => {\n    data.listArray = []\n    let newBoardList = state.boards.slice()\n    newBoardList.push(data)\n    state.boards = newBoardList;\n    return state;\n}\n\nlet editField = (state, data, index) => {\n    state.boards.map((element, i) => {\n        if (i === index) {\n            element.boardName = data\n            element.isSet = !element.isSet\n        }\n        return true\n    });\n    return state\n}\n\nlet clicked = (state, bindex, index) => {\n    console.log(bindex, index)\n    state.boards[bindex].listArray.map((elem, i) => {\n        if (i === index) {\n            elem.listSet = !elem.listSet\n        }\n        return true\n    })\n    return state\n}\n\nlet addList = (state, data, index) => {\n    state.boards[index].listArray.push({ listName: data, cards: [] })\n    return state\n}\n\nlet addCard = (state, data, Bindex, Lindex) => {\n    console.log(state)\n    state.boards[Bindex].listArray[Lindex].cards.push({ cardName: data })\n    return state\n}\n\nlet sorted = (state, { droppableIdStart, droppableIdEnd, droppableIndexStart, droppableIndexEnd, draggableId, BoardNum }) => {\n    // dragging for same list\n    if (droppableIdStart === droppableIdEnd) {\n        const listIndex = parseInt(droppableIdStart.split(\"t\")[1])\n        console.log(\"listIndex\", listIndex)\n        const list = state.boards[BoardNum].listArray[listIndex]\n        const card = list.cards[droppableIndexStart]\n        list.cards.splice(droppableIndexEnd, 0, card)\n        list.cards.splice(droppableIndexStart, 1)\n    }\n    // dragging for other list\n    else {\n        const startListIndex = parseInt(droppableIdStart.split(\"t\")[1])\n        const endListIndex = parseInt(droppableIdEnd.split(\"t\")[1])\n        const startList = state.boards[BoardNum].listArray[startListIndex]\n        const endList = state.boards[BoardNum].listArray[endListIndex]\n        const card = startList.cards[droppableIndexStart]\n        endList.cards.splice(droppableIndexEnd, 0, card)  \n        startList.cards.splice(droppableIndexStart, 1)\n    }\n    console.log(state.boards[BoardNum])\n    return state\n}"]},"metadata":{},"sourceType":"module"}