{"ast":null,"code":"import { combineReducers } from \"redux\";\nlet initialState = {\n  userName: \"\",\n  bgImgs: [],\n  boards: [{\n    boardName: \"mukhtar\",\n    isSet: false,\n    BgImgUrl: \"\",\n    listArray: [{\n      listSet: false,\n      listName: \"list 1\",\n      cards: [{\n        cardName: \"card 1\"\n      }]\n    }, {\n      listSet: false,\n      listName: \"list 2\",\n      cards: [{\n        cardName: \"card 1\"\n      }, {\n        cardName: \"card 2\"\n      }, {\n        cardName: \"card 3\"\n      }]\n    }]\n  }]\n};\n\nfunction appReducer(state = initialState, action) {\n  let stateCopy = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case \"fImg\":\n      stateCopy.bgImgs = action.payload;\n      return stateCopy;\n\n    case \"setImgUrl\":\n      stateCopy.boards.bgImgUrl = action.payload;\n      return stateCopy;\n\n    case \"addBoard\":\n      return addToList(stateCopy, action.payload);\n\n    case \"deleteItem\":\n      let newBoards = stateCopy.boards.filter((el, i) => i !== action.payload);\n      stateCopy.boards = newBoards;\n      return stateCopy;\n\n    case \"editField\":\n      return editField(stateCopy, action.payload.data, action.payload.index);\n\n    case \"editIndex\":\n      let newBoard = stateCopy.boards.indexOf(action.payload);\n      stateCopy.boards = newBoard;\n      return stateCopy;\n\n    case \"boardClicked\":\n      return clicked(stateCopy, action.payload.Bindex, action.payload.ind);\n\n    case \"addList\":\n      console.log(action.payload);\n      return addList(stateCopy, action.payload.data, action.payload.index);\n\n    case \"addCard\":\n      return addCard(stateCopy, action.payload.data, action.payload.Bindex, action.payload.Lindex);\n\n    case \"sorted\":\n      return sorted(stateCopy, action.payload);\n\n    default:\n      return stateCopy;\n  }\n}\n\nconst rootReducers = combineReducers({\n  appReducer\n});\nexport default rootReducers;\n\nlet addToList = (state, data) => {\n  data.listArray = [];\n  let newBoardList = state.boards.slice();\n  newBoardList.push(data);\n  state.boards = newBoardList;\n  return state;\n};\n\nlet editField = (state, data, index) => {\n  state.boards.map((element, i) => {\n    if (i === index) {\n      element.boardName = data;\n      element.isSet = !element.isSet;\n    }\n\n    return true;\n  });\n  return state;\n};\n\nlet clicked = (state, bindex, index) => {\n  console.log(bindex, index);\n  state.boards[bindex].listArray.map((elem, i) => {\n    if (i === index) {\n      elem.listSet = !elem.listSet;\n    }\n\n    return true;\n  });\n  return state;\n};\n\nlet addList = (state, data, index) => {\n  state.boards[index].listArray.push({\n    listName: data,\n    cards: []\n  });\n  return state;\n};\n\nlet addCard = (state, data, Bindex, Lindex) => {\n  console.log(state);\n  state.boards[Bindex].listArray[Lindex].cards.push({\n    cardName: data\n  });\n  return state;\n};\n\nlet sorted = (state, {\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  draggableId,\n  BoardNum\n}) => {\n  // dragging for same list\n  if (droppableIdStart === droppableIdEnd) {\n    const listIndex = parseInt(droppableIdStart.split(\"t\")[1]);\n    console.log(\"listIndex\", listIndex);\n    const list = state.boards[BoardNum].listArray[listIndex];\n    const card = list.cards[droppableIndexStart];\n    list.cards.splice(droppableIndexEnd, 0, card);\n    list.cards.splice(droppableIndexStart, 1);\n  } // dragging for other list\n  else {\n      const startListIndex = parseInt(droppableIdStart.split(\"t\")[1]);\n      const endListIndex = parseInt(droppableIdEnd.split(\"t\")[1]);\n      const startList = state.boards[BoardNum].listArray[startListIndex];\n      const endList = state.boards[BoardNum].listArray[endListIndex];\n      const card = startList.cards[droppableIndexStart];\n      endList.cards.splice(droppableIndexEnd, 0, card);\n      startList.cards.splice(droppableIndexStart, 1);\n    }\n\n  console.log(state.boards[BoardNum]);\n  return state;\n};","map":{"version":3,"sources":["/Users/macbookpro/Downloads/my codes/daily-assignment/W24Wass/weekly-ass/src/redux/stateReducer.js"],"names":["combineReducers","initialState","userName","bgImgs","boards","boardName","isSet","BgImgUrl","listArray","listSet","listName","cards","cardName","appReducer","state","action","stateCopy","JSON","parse","stringify","type","payload","bgImgUrl","addToList","newBoards","filter","el","i","editField","data","index","newBoard","indexOf","clicked","Bindex","ind","console","log","addList","addCard","Lindex","sorted","rootReducers","newBoardList","slice","push","map","element","bindex","elem","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","BoardNum","listIndex","parseInt","split","list","card","splice","startListIndex","endListIndex","startList","endList"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\n\nlet initialState = {\n    userName: \"\",\n    bgImgs: [],\n    boards: [{\n        boardName: \"mukhtar\",\n        isSet: false,\n        BgImgUrl: \"\",\n        listArray: [{\n            listSet: false,\n            listName: \"list 1\",\n            cards: [{\n                cardName: \"card 1\"\n            }]\n        },\n        {\n            listSet: false,\n            listName: \"list 2\",\n            cards: [{\n                cardName: \"card 1\"\n            },\n            {\n                cardName: \"card 2\"\n            },\n            {\n                cardName: \"card 3\"\n            }]\n        }]\n    }]\n}\n\nfunction appReducer(state = initialState, action) {\n    let stateCopy = JSON.parse(JSON.stringify(state))\n    switch (action.type) {\n        case \"fImg\":\n            stateCopy.bgImgs = action.payload\n            return stateCopy;\n        case \"setImgUrl\": \n            stateCopy.boards.bgImgUrl = action.payload\n            return stateCopy;\n        case \"addBoard\":\n            return addToList(stateCopy, action.payload)\n        case \"deleteItem\":\n            let newBoards = stateCopy.boards.filter((el, i) => i !== action.payload)\n            stateCopy.boards = newBoards\n            return stateCopy;\n        case \"editField\":\n            return editField(stateCopy, action.payload.data, action.payload.index)\n        case \"editIndex\":\n            let newBoard = stateCopy.boards.indexOf(action.payload)\n            stateCopy.boards = newBoard\n            return stateCopy;\n        case \"boardClicked\":\n            return clicked(stateCopy, action.payload.Bindex, action.payload.ind)\n        case \"addList\":\n            console.log(action.payload)\n            return addList(stateCopy, action.payload.data, action.payload.index)\n        case \"addCard\":\n            return addCard(stateCopy, action.payload.data, action.payload.Bindex, action.payload.Lindex)\n        case \"sorted\":\n            return sorted(stateCopy, action.payload)\n        default:\n            return stateCopy;\n    }\n}\n\nconst rootReducers = combineReducers({\n    appReducer\n})\n\nexport default rootReducers;\n\nlet addToList = (state, data) => {\n    data.listArray = []\n    let newBoardList = state.boards.slice()\n    newBoardList.push(data)\n    state.boards = newBoardList;\n    return state;\n}\n\nlet editField = (state, data, index) => {\n    state.boards.map((element, i) => {\n        if (i === index) {\n            element.boardName = data\n            element.isSet = !element.isSet\n        }\n        return true\n    });\n    return state\n}\n\nlet clicked = (state, bindex, index) => {\n    console.log(bindex, index)\n    state.boards[bindex].listArray.map((elem, i) => {\n        if (i === index) {\n            elem.listSet = !elem.listSet\n        }\n        return true\n    })\n    return state\n}\n\nlet addList = (state, data, index) => {\n    state.boards[index].listArray.push({ listName: data, cards: [] })\n    return state\n}\n\nlet addCard = (state, data, Bindex, Lindex) => {\n    console.log(state)\n    state.boards[Bindex].listArray[Lindex].cards.push({ cardName: data })\n    return state\n}\n\nlet sorted = (state, { droppableIdStart, droppableIdEnd, droppableIndexStart, droppableIndexEnd, draggableId, BoardNum }) => {\n    // dragging for same list\n    if (droppableIdStart === droppableIdEnd) {\n        const listIndex = parseInt(droppableIdStart.split(\"t\")[1])\n        console.log(\"listIndex\", listIndex)\n        const list = state.boards[BoardNum].listArray[listIndex]\n        const card = list.cards[droppableIndexStart]\n        list.cards.splice(droppableIndexEnd, 0, card)\n        list.cards.splice(droppableIndexStart, 1)\n    }\n    // dragging for other list\n    else {\n        const startListIndex = parseInt(droppableIdStart.split(\"t\")[1])\n        const endListIndex = parseInt(droppableIdEnd.split(\"t\")[1])\n        const startList = state.boards[BoardNum].listArray[startListIndex]\n        const endList = state.boards[BoardNum].listArray[endListIndex]\n        const card = startList.cards[droppableIndexStart]\n        endList.cards.splice(droppableIndexEnd, 0, card)  \n        startList.cards.splice(droppableIndexStart, 1)\n    }\n    console.log(state.boards[BoardNum])\n    return state\n}"]},"metadata":{},"sourceType":"module"}