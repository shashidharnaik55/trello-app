{"version":3,"sources":["actions/action.js","components/home.js","components/board.js","App.js","redux/stateReducer.js","index.js"],"names":["fetchBackgrounds","param","request","axios","method","url","dispatch","then","response","console","log","type","payload","data","hits","catch","err","addBoard","deleteItem","index","editField","editIndex","name","boardClicked","Bindex","ind","setClick","addList","addCard","Lindex","sorted","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","BoardNum","Home","state","boardName","BgImgUrl","addData","boardData","board","props","editData","field","this","page","className","aria-hidden","placeholder","to","style","textDecoration","color","data-toggle","data-target","id","tabIndex","role","aria-labelledby","background","backgroundSize","backgroundRepeat","value","onChange","e","setState","target","data-dismiss","aria-label","onClick","border","overflowY","height","bgImgs","map","elm","width","largeImageURL","src","previewURL","alt","key","boards","length","elem","pathname","isSet","rows","outline","readOnly","cursor","Component","connect","appReducer","bindActionCreators","MyBoard","listName","cardName","onDragEnd","result","destination","source","location","droppableId","componentDidUpdate","prevProps","prevState","listSet","backgroundPosition","listArray","provider","droppableProps","ref","innerRef","cards","cardindex","draggableProps","dragHandleProps","display","paddingRight","whiteSpace","App","path","component","initialState","userName","rootReducers","combineReducers","action","stateCopy","JSON","parse","stringify","addToList","newBoards","filter","el","i","newBoard","indexOf","clicked","newBoardList","slice","push","element","bindex","listIndex","parseInt","split","list","card","splice","startListIndex","endListIndex","startList","endList","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79caf694.chunk.js","sourcesContent":["import axios from \"axios\"\nconst Api_Key = '16039725-c9e448ac866c710680005bca2'\n\nexport function fetchBackgrounds(param) {\n    let request = axios({\n        method: \"get\",\n        url: `https://pixabay.com/api/?key=${Api_Key}&q=nature&page=${param}&image_type=photo`\n    })\n    return (dispatch) => {\n        request.then(response => {\n            console.log(response)\n            dispatch({\n                type: \"fImg\",\n                payload: response.data.hits\n            })\n        }).catch(err => console.log(err));\n    }\n}\n\nexport function addBoard(data) {\n    return {\n        type: \"addBoard\",\n        payload: data\n    }\n}\n\nexport function deleteItem(index) {\n    return {\n        type: \"deleteItem\",\n        payload: index\n    }\n}\n\nexport function editField(data, index) {\n    return {\n        type: \"editField\",\n        payload: {\n            data: data,\n            index: index\n        }\n    }\n}\n\nexport function editIndex(name) {\n    return {\n        type: \"editIndex\",\n        payload: name\n    }\n}\n\nexport function boardClicked(Bindex , ind) {\n    console.log(\"action log\",ind)\n    return {\n        type: \"boardClicked\",\n        payload: {\n            Bindex: Bindex,\n            ind: ind\n        }\n\n    }\n}\n\nexport function setClick() {\n    return {\n        type: \"setClick\"\n    }\n}\n\nexport function addList(data, index) {\n    return {\n        type: \"addList\",\n        payload: {\n            data: data,\n            index: index\n        }\n    }\n}\n\nexport function addCard(data, Bindex, Lindex) {\n    return {\n        type: \"addCard\",\n        payload: {\n            data: data,\n            Bindex: Bindex,\n            Lindex: Lindex\n        }\n    }\n}\n\nexport function sorted(droppableIdStart,droppableIdEnd,droppableIndexStart,droppableIndexEnd,draggableId, BoardNum) {\n    return {\n        type: \"sorted\",\n        payload: {\n            droppableIdStart,\n            droppableIdEnd,\n            droppableIndexStart,\n            droppableIndexEnd,\n            draggableId,\n            BoardNum\n        }\n    }\n}","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport {\n    deleteItem, addBoard, editField, editIndex,\n    boardClicked, setClick, fetchBackgrounds,\n} from \"../actions/action\"\n\nclass Home extends Component {\n\n    state = {\n        boardName: \"\",\n        BgImgUrl: \"\"\n    }\n\n    addData = () => {\n        let boardData = {\n            board: {\n                \"boardName\": this.state.boardName,\n                \"isSet\": false,\n                \"BgImgUrl\": this.state.BgImgUrl\n            }\n        }\n        this.props.addBoard(boardData.board)\n    }\n\n    editData = (field, index) => {\n        this.props.editField(field, index)\n    }\n\n    componentDidMount() {\n        this.props.fetchBackgrounds(this.props.page)\n    }\n    \n\n    render() {\n        console.log(this.state)\n        return (\n            <div>\n                <nav className=\"navbar py-1 navBar1\">\n                    <div className=\"d-flex col\">\n                        <div className=\"row col-md-5\">\n                            <i className=\"fa fa-home rounded mr-1\" aria-hidden=\"true\"></i>\n                            <input className=\"searchInp rounded\" type=\"search\" placeholder=\"Search...\" />\n                        </div>\n                        <div className=\"col-md-2 mt-1 text-center\">\n                            <Link to=\"/\" style={{ textDecoration: 'none', color: 'white' }} ><h4 className=\"trello\"><i className=\"fa fa-trello mr-1\" aria-hidden=\"true\"></i>Trello</h4></Link>\n                        </div>\n                        <button data-toggle=\"modal\" data-target=\"#exampleModal\" className=\"button rounded ml-auto\"><i className=\"fa fa-plus\" aria-hidden=\"true\"></i> Create New Board</button>\n                    </div>\n                </nav>\n\n                <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                    <div className=\"modal-dialog\" role=\"document\">\n                        <div className=\"d-flex\">\n                            <div style={{ background: `url(${this.state.BgImgUrl})`, backgroundSize: \"contain\", backgroundRepeat: \"no-repeat\"}} className=\"modal-content bg-transparent\">\n                                <div className=\"modal-body\">\n                                    <input value={this.state.boardName} onChange={(e) => this.setState({ boardName: e.target.value })} className=\"w-75 rounded searchInp\" type=\"text\" placeholder=\"Enter Title\" />\n                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                </div>\n                                <div onClick={() => this.addData()} data-dismiss=\"modal\" className=\"btn btn-success mt-3\">Create Board</div>\n                            </div>\n                            <div style={{ border: \"none\" }} className=\"modal-content col-md-4 bg-transparent\">\n                                <div style={{ overflowY: \"scroll\", height: \"120px\" }} className=\"row\">\n                                    {this.props.bgImgs.map((elm, index) => {\n                                        return <img width=\"900px\" height=\"30\" onClick={() => this.setState({ BgImgUrl: elm.largeImageURL })} src={elm.previewURL} alt=\"\" key={index} className=\"p-0 m-1 rounded col-md-4\">\n                                        </img>\n                                    })}\n                                    <button onClick={()=>this.props.fetchBackgrounds(this.props.page)}>more</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"app\">\n                    {(this.props.boards).length === 0 &&\n                        <h4 className=\"font-weight-lighter text-center\">No Trello Boards Available!</h4>\n                    }\n\n                    <div className=\"d-flex justify-content-start\">\n                        {(this.props.boards).length !== 0 &&\n                            (this.props.boards.map((elem, index) => {\n                                return <div key={index} className=\"card m-3 shadow\">\n                                    <Link style={{ textDecoration: 'none' }} to={{ pathname: \"/myboard\", state: { index } }}>\n                                        <div className=\"mt-2 ml-2 d-flex col\">\n                                            <div className=\"font-weight-bolder mt-1 text-secondary\">Board Title</div>\n                                            <div className=\"ml-auto\"><i className=\"fa text-dark fa-arrow-circle-o-right fa-2x\" aria-hidden=\"true\"></i></div>\n                                        </div>\n                                    </Link>\n                                    <div className=\"card-body\">{elem.isSet ? <textarea style={{ border: 'solid 1px rgb(165, 165, 165)' }} onChange={(e) => this.setState({ boardName: e.target.value })} rows=\"1\" className=\"card-title p-2 bg-light rounded\">{elem.boardName}</textarea> :\n                                        <div style={{ outline: \"none\", border: 'none' }} readOnly onChange={(e) => this.setState({ boardName: e.target.value })} rows=\"1\" className=\"card-title p-2 bg-light rounded\">{elem.boardName}</div>}\n                                    </div>\n                                    <div className=\"ml-auto d-flex\">\n                                        <div style={{ cursor: 'pointer' }} onClick={() => this.editData(this.state.boardName, index)}>{elem.isSet ? <i className=\"fa fa-check-square-o m-2 text-success\" aria-hidden=\"true\"></i> : <i className=\"fa fa-pencil-square-o m-2 text-secondary\"></i>}</div>\n                                        <i style={{ cursor: 'pointer' }} className=\"fa fa-trash m-2 text-secondary\" onClick={() => { this.props.deleteItem(index) }} aria-hidden=\"true\"></i>\n                                    </div>\n                                </div>\n                            }))\n                        }\n                    </div>\n                </div>\n            </div >\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    console.log(state)\n    return {\n        boards: state.appReducer.boards,\n        bgImgs: state.appReducer.bgImgs,\n        page: state.appReducer.page\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        deleteItem, addBoard, editField, editIndex, boardClicked,\n        setClick, fetchBackgrounds\n    }, dispatch)\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport { addList, addCard, sorted, editField, setClick, boardClicked } from \"../actions/action\";\nimport { bindActionCreators } from \"redux\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\"\n\n\n\nclass MyBoard extends Component {\n\n    state = {\n        listName: \"\",\n        cardName: \"\"\n    }\n\n    editData = (field, index) => {\n        this.props.editField(field, index)\n    }\n\n    onDragEnd = (result) => {\n        let { destination, source, draggableId } = result;\n        let { index: BoardNum } = this.props.location.state;\n        if (!destination) return true\n        this.props.sorted(source.droppableId, destination.droppableId, source.index, destination.index, draggableId, BoardNum)\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n      if(prevState===this.state){\n        this.setState({\n            listName: \"\",\n            cardName: \"\",\n        })\n      }\n      if(prevProps===this.props){\n          this.setState(this.props.boards.listSet)\n      }\n    };\n    \n\n    render() {\n        let { index: BoardNum } = this.props.location.state\n        const { boards } = this.props\n        const elem = boards[BoardNum]\n        return (\n            <div style={{ background: `url(${elem.BgImgUrl})`, backgroundSize: \"cover\", backgroundPosition: \"50%\"}}>\n                <nav className=\"navbar py-1 navBar\">\n                    <div className=\"d-flex col\">\n                        <div className=\"row col-md-5\">\n                            <i className=\"fa fa-home rounded mr-1\" aria-hidden=\"true\"></i>\n                            <input className=\"searchInp rounded\" type=\"search\" placeholder=\"Search...\" />\n                        </div>\n                        <div className=\"col-md-2 mt-1 text-center\">\n                            <Link to=\"/\" style={{ textDecoration: 'none', color: 'white' }} ><h4 className=\"trello\"><i className=\"fa fa-trello mr-1\" aria-hidden=\"true\"></i>Trello</h4></Link>\n                        </div>\n                        <div className=\"col\">\n                            <div className=\"float-right font-weight-bolder text-white\">{elem.boardName}</div>\n                        </div>\n                    </div>\n                </nav>\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <div id=\"mainContainer\">\n                        <div className=\"list m-2\">\n                            {elem.listArray.map((elem, index) => {\n                            return <Droppable droppableId={`list${index}`}>\n                                {(provider) => (\n                                    <div {...provider.droppableProps} ref={provider.innerRef} key={index} className=\"bg-white p-2 col-2 rounded m-1\">\n                                        <div className=\"font-weight-bolder\">{elem.listName}</div>\n                                        {elem.cards.map((elm, cardindex) => {\n                                            return <Draggable index={cardindex} draggableId={`list${index}card${cardindex}`}>\n                                                {(provider) => (\n                                                    <div {...provider.draggableProps} ref={provider.innerRef} {...provider.dragHandleProps} key={cardindex} className=\"bg-light p-2 m-2 shadow rounded text-dark\">\n                                                        {elm.cardName}\n                                                    </div>\n                                                )\n                                                }\n                                            </Draggable>\n                                        })}\n                                        {provider.placeholder}\n                                        <div className=\"text-center rounded addBtn\">{elem.listSet ? <div><textarea value={this.state.cardName} placeholder=\"Add Card...\" style={{ border: 'solid 1px rgb(165, 165, 165)' }} onChange={(e) => this.setState({ cardName: e.target.value })} rows=\"1\" className=\"card-title p-2 bg-light rounded\"></textarea>\n                                            <button onClick={() => this.props.addCard(this.state.cardName, BoardNum, index)} className=\"btn btn-success\">Add Card</button></div>\n                                            : <div onClick={() => this.props.boardClicked(BoardNum, index)}><i className=\"fa fa-plus\" aria-hidden=\"true\" /> Add</div>}\n                                        </div>\n                                    </div>\n                                )\n                                }\n                            </Droppable>\n                        })}\n                        <div style={{ display: \"inlineBlock\", paddingRight: \"10px\", whiteSpace: \"nowrap\"}}>\n                            <input style={{ background: \"transparent\" , color: \"white\" }} value={this.state.listName} placeholder=\"Add List...\" type=\"text\" onChange={(e) => this.setState({ listName: e.target.value })} />\n                            <button className=\"btn btn-sm bg-light\" onClick={() => this.props.addList(this.state.listName, BoardNum)}>Add <i className=\"fa fa-plus\" aria-hidden=\"true\"></i></button>\n                        </div>\n                        </div>\n                    </div>\n                </DragDropContext>\n            </div>\n        );\n\n    }\n}\n\nconst mapStateToProps = (state) => {\n    console.log(\"myboard state\", state)\n    return {\n        boards: state.appReducer.boards\n    };\n}\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        addList, addCard, sorted, editField, setClick, boardClicked\n    }, dispatch)\n\n}\nexport default connect(\n    mapStateToProps, mapDispatchToProps\n)(MyBoard);\n\n\n\n\n","import React, { Component } from 'react';\nimport Home from \"./components/home\";\nimport MyBoard from \"./components/board\";\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/myboard\" component={MyBoard}>\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\n\nlet initialState = {\n    userName: \"\",\n    page: 1,\n    bgImgs: [],\n    boards: []\n}\n\nfunction appReducer(state = initialState, action) {\n    let stateCopy = JSON.parse(JSON.stringify(state))\n    switch (action.type) {\n        case \"fImg\":\n            console.log(action.payload)\n            stateCopy.bgImgs = [...stateCopy.bgImgs,...action.payload]\n            stateCopy.page++\n            return stateCopy;\n        case \"addBoard\":\n            return addToList(stateCopy, action.payload)\n        case \"deleteItem\":\n            let newBoards = stateCopy.boards.filter((el, i) => i !== action.payload)\n            stateCopy.boards = newBoards\n            return stateCopy;\n        case \"editField\":\n            return editField(stateCopy, action.payload.data, action.payload.index)\n        case \"editIndex\":\n            let newBoard = stateCopy.boards.indexOf(action.payload)\n            stateCopy.boards = newBoard\n            return stateCopy;\n        case \"boardClicked\":\n            return clicked(stateCopy, action.payload.Bindex, action.payload.ind)\n        case \"addList\":\n            console.log(action.payload)\n            return addList(stateCopy, action.payload.data, action.payload.index)\n        case \"addCard\":\n            return addCard(stateCopy, action.payload.data, action.payload.Bindex, action.payload.Lindex)\n        case \"sorted\":\n            return sorted(stateCopy, action.payload)\n        default:\n            return stateCopy;\n    }\n}\n\nconst rootReducers = combineReducers({\n    appReducer\n})\n\nexport default rootReducers;\n\nlet addToList = (state, data) => {\n    data.listArray = []\n    let newBoardList = state.boards.slice()\n    newBoardList.push(data)\n    state.boards = newBoardList;\n    return state;\n}\n\nlet editField = (state, data, index) => {\n    state.boards.map((element, i) => {\n        if (i === index) {\n            element.boardName = data\n            element.isSet = !element.isSet\n        }\n        return true\n    });\n    return state\n}\n\nlet clicked = (state, bindex, index) => {\n    console.log(bindex, index)\n    state.boards[bindex].listArray.map((elem, i) => {\n        if (i === index) {\n            elem.listSet = !elem.listSet\n        }\n        return true\n    })\n    return state\n}\n\nlet addList = (state, data, index) => {\n    state.boards[index].listArray.push({ listName: data, cards: [] })\n    return state\n}\n\nlet addCard = (state, data, Bindex, Lindex) => {\n    console.log(state)\n    state.boards[Bindex].listArray[Lindex].cards.push({ cardName: data })\n    return state\n}\n\nlet sorted = (state, { droppableIdStart, droppableIdEnd, droppableIndexStart, droppableIndexEnd, draggableId, BoardNum }) => {\n    // dragging for same list\n    if (droppableIdStart === droppableIdEnd) {\n        const listIndex = parseInt(droppableIdStart.split(\"t\")[1])\n        console.log(\"listIndex\", listIndex)\n        const list = state.boards[BoardNum].listArray[listIndex]\n        const card = list.cards[droppableIndexStart]\n        list.cards.splice(droppableIndexEnd, 0, card)\n        list.cards.splice(droppableIndexStart, 1)\n    }\n    // dragging for other list\n    else {\n        const startListIndex = parseInt(droppableIdStart.split(\"t\")[1])\n        const endListIndex = parseInt(droppableIdEnd.split(\"t\")[1])\n        const startList = state.boards[BoardNum].listArray[startListIndex]\n        const endList = state.boards[BoardNum].listArray[endListIndex]\n        const card = startList.cards[droppableIndexStart]\n        endList.cards.splice(droppableIndexEnd, 0, card)  \n        startList.cards.splice(droppableIndexStart, 1)\n    }\n    console.log(state.boards[BoardNum])\n    return state\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport appReducer from './redux/stateReducer';\nimport thunk from \"redux-thunk\";\n\nlet store = createStore(appReducer, applyMiddleware(thunk))\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));"],"sourceRoot":""}